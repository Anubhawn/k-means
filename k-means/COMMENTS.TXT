## Portability 

The code in this directory has been written to conform to the ANSI C99 standard.

It compiles and has been tested on Mac OS X 10.10 and GNU/Linux Raspbian (Wheezy).

It should also compile on Windows using Visual Studio 2013 or later, or using an environment that includes a compliant compiler such as CYGWIN or MINGW. This has not been tested, however.

## Compiling

To compile the code in a Unix environment, type `make` from a command-line prompt.

This will generate an executable named `km_test`.

To delete built files, type `make clean`.

## Running

To run the test program type `./km_test` from a command-line prompt.

This will run k-means clustering on the input file `input-2.csv` and write the results to `OUTPUT.TXT`.

## Optimisation

The k-means algorithm has been implemented using Lloyd's algorithm. This differs slightly from the algorithm described at http://www.audioanalytic.com/en/64-codingexcersie in that the `SQRT` step is ommitted from the distance computation. This results in a minor performance improvement with no effect on the point classifications. However the overall error metric is slightly higher using sum-of-squares.

The current code runs in less than 0.8s on a 700 MHz Raspberry Pi.

If further optimisation is required, a more efficient implementation such that proposed by Kanugo et al could be considered: http://www.cs.umd.edu/~mount/Projects/KMeans


